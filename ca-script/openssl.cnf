openssl_conf = openssl_init

[openssl_init]
oid_section = OIDs

[ ca ]
# `man ca`
default_ca = CA_root

[ ca_root]
# Directory and file locations.
dir               = ./root-ca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = ./keys/root-ca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

default_md        = sha3-256
name_opt          = ca_default
cert_opt          = ca_default
default_days      = 3650
preserve          = no
policy            = policy_cn

[ ca_intermediate ]
dir               = ./persistentid-ca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = ./keys/persistentid-ca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

default_md        = sha3-256
name_opt          = ca_default
cert_opt          = ca_default
preserve          = no
policy            = policy_cn
# intermediate CA will be signing DeviceId ECA certs that don't expire
default_enddate   = 99991231235959Z
x509_extensions   = v3_intermediate_eca

# Intermediate CA mocking the embedded CA in each platform represented by the
# DeviceId key pair. We use certs signed by this CA as the basis for the
# template generated by the lib/csr crate in Hubris.
[ ca_deviceid_eca ]
# Directory and file locations.
dir               = ./deviceid-eca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = ./keys/deviceid-eca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

default_md        = sha3-256
name_opt          = ca_default
cert_opt          = ca_default
preserve          = no
policy            = policy_cn
# DeviceId ECA signs other DICE certs that don't expire
default_enddate   = 99991231235959Z
# no default x509_extensions, we use this CA to issue certs w/ different sets

[ ca_selfsigned_persistentid ]
# Directory and file locations.
dir               = ./persistentid-self-ca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = ./keys/persistentid-ca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

default_md        = sha3-256
name_opt          = ca_default
cert_opt          = ca_default
preserve          = no
policy            = policy_cn
default_enddate   = 99991231235959Z

[ policy_cn ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
organizationName        = match
commonName              = supplied

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only
default_md          = sha3-256
x509_extensions     = v3_root_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address

# Optionally, specify some defaults.
countryName_default             = US
stateOrProvinceName_default     = California
localityName_default            = Emeryville
0.organizationName_default      = Oxide Computer Company

[ v3_root_ca ]
# Extensions for a typical CA (`man x509v3_config`).
basicConstraints = critical, CA:true # no pathlen, ignored for trusted root
keyUsage = critical, cRLSign, keyCertSign
authorityKeyIdentifier = none
subjectKeyIdentifier = none

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
basicConstraints = critical, CA:true
keyUsage = critical, keyCertSign
authorityKeyIdentifier = none
subjectKeyIdentifier = none

[ v3_persistentid_ca ]
# Extensions for the persistent ID embedded CA
basicConstraints = critical, CA:true
keyUsage = critical, keyCertSign
certificatePolicies = critical, tcg-dice-kp-identityInit, tcg-dice-kp-attestInit, tcg-dice-kp-eca
authorityKeyIdentifier = none
subjectKeyIdentifier = none

[ v3_deviceid_eca ]
# Extensions for the DeviceId embedded CA
basicConstraints = critical, CA:true
keyUsage = critical, keyCertSign
certificatePolicies = critical, tcg-dice-kp-attestInit, tcg-dice-kp-eca
authorityKeyIdentifier = none
subjectKeyIdentifier = none

[ v3_alias ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = critical, CA:FALSE
keyUsage = critical, digitalSignature
certificatePolicies = critical, tcg-dice-kp-attestInit
dice-tcb-info=critical, ASN1:SEQUENCE:dice_tcb_info
authorityKeyIdentifier = none
subjectKeyIdentifier = none

[ v3_spmeasure ]
basicConstraints = critical, CA:true
keyUsage = critical, keyCertSign
certificatePolicies = critical, tcg-dice-kp-attestInit, tcg-dice-kp-eca
dice-tcb-info=critical, ASN1:SEQUENCE:dice_tcb_info
authorityKeyIdentifier = none
subjectKeyIdentifier = none

[ v3_trust_quorum_dhe ]
basicConstraints = critical, CA:FALSE
keyUsage = critical, digitalSignature, keyAgreement, keyEncipherment
dice-tcb-info=critical, ASN1:SEQUENCE:dice_tcb_info
authorityKeyIdentifier = none
subjectKeyIdentifier = none

[dice_tcb_info]
field1=IMPLICIT:6,SEQUENCE:fwids

[fwids]
field1=SEQUENCE:sha3_256_null

[sha3_256_null]
field1=OID:2.16.840.1.101.3.4.2.8
field2=FORMAT:HEX,OCTETSTRING:0000000000000000000000000000000000000000000000000000000000000000
#f69338a3130958434be0aa0390389f85ad0577bac4d4c4c4466d6b73f175d037b1480b018b556bc56dfaf828a0c275bb527b818c429cffbcd9cfbb08de43f7d4

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning

[OIDs]
tcg-dice-kp-identityInit = 2.23.133.5.4.100.6
tcg-dice-kp-attestInit = 2.23.133.5.4.100.8
tcg-dice-kp-eca = 2.23.133.5.4.100.12
dice-tcb-info = 2.23.133.5.4.1
